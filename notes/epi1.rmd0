---
title: "Epidemic models 1"
author: "Ben Bolker"
date: '`r strsplit(as.character(Sys.time())," ")[[1]][1]` <#copyright> BMB  (except textbook material/other images)'
urlcolor: blue
bibliography: math4mb.bib
output: tufte_handout
header-includes:
  - \hypersetup{colorlinks=true}
---

```{r setup,include=FALSE}
library(ggplot2); theme_set(theme_bw())
library(tidyverse)
```

```{r opts,include=FALSE}
library("knitr")
knitr::opts_chunk$set(eval=TRUE)
library("reticulate")
## scikit-learn? py_install("scikit-learn") works but py_module_available("scikit-learn") doesn't ...
modules <- c("pandas","numpy","sympy")
for (m in modules) {
    while (!py_module_available(m)) {
        cat("installing",m,"\n")
        py_install(m)
    }
}
use_python("/usr/bin/python3")
matplotlib <- import("matplotlib")
matplotlib$use("Agg", force = TRUE)
```

\newcommand{\rzero}{\mathcal{R}_0}

# motivation

- P & I data from Philadelphia 1918 flu:

```{r,philadata,echo=FALSE,message=FALSE,fig.cap="Phila. 1918 flu data"}
dd <- (read_csv("data/pim_us_phila_city_1918_dy.csv")
    %>% mutate_at("date", ~lubridate::ymd(.))
)
gg1 <- ggplot(dd, aes(date,pim)) + geom_point() + geom_line() +
    labs(y="Pneumonia & influenza deaths",title="Philadelphia 1918 flu")
ggsave("pix/phila_flu.pdf")
print(gg1)
```

## what do we want to figure out?

## what shall we assume?

* classify individuals as $S$, $I$ (**compartmental** model; **microparasite** or **intensity-independent**)
* disease is transmitted from $S$ to $I$
* $S \to I$ instantaneously (zero latent period, no $E$)
* population is **homogeneous** (no heterogeneity in susceptibility, infectiousness, contact)
* fixed population size (birth = migration = 'natural' death = 0)
* transmission rate is time-invariant

---

* assumption 2 is OK (Pasteur, [Koch's postulates](https://en.wikipedia.org/wiki/Koch%27s_postulates)  ...)
* all the rest are approximations

start simple! 

* parsimony
* robustness?
* applicability/estimation?

@levins_strategy_1966 (also @orzack_critical_1993, @levins_response_1993, @weisberg_forty_2007)

# exponential growth

* one variable (=1D model)
* how does disease spread? $\to$ equation


---

## what variables should we use?

* time ($t$)
* state variable: incidence, prevalence, death rate, death toll (= cumulative death?)
* deaths loosely connected to transmission

but deaths are observed!

---

when are deaths a good **proxy** for incidence?

* infection -> death time is fixed
* homogeneity? (might not matters?)
* mortality curve is shifted epidemic

(COVID context ... we observe case reports, number of tests, hospitalizations, and deaths)

* **incidence**: number of infections per unit time (rate or flow)
* **prevalence**: number of currently infected people (quantity or stock)

prevalence is closer to the **mechanism**

---

model components:

- $I(t)$ (state variable: prevalence)
- $I(0)$ (initial conditions)
- $\beta$ (parameter) = avg contacts **per susceptible per infective per unit time**

$$
I(t+\Delta t) \approx I(t) + \beta I(t) \Delta t
$$

Take $\lim \Delta t \to 0$ (and solve):

$$
\frac{dI}{dt} = \beta I \to  I(t) = I(0) exp(\beta t)
$$

## model criticism

* Ignored discrete nature of individuals
* Ignored time-varying $\beta$ (e.g. **diurnal** fluctuations)
* Ignored finite infectious periods (recovery/death)

---

**Next**: What if we make infectious periods finite? (i.e., including recovery (**clearance**) or death

$$
dI/dt = \beta I - \gamma I
$$

## mean infectious period

$$
\begin{split}
I(t) & = I(0) \exp(-\gamma t) \\
\textrm{proportion uninfected} & = \exp(-\gamma t) \\
\textrm{proportion infected} & = 1- \exp(-\gamma t) (= \textrm{CDF} := C(t)) \\
\textrm{PDF}: &  = C'(t) = \gamma \exp(-\gamma t) \\
\textrm{substitute} ~ x & = \gamma t \quad \to \quad dx = \gamma \, dt \\
\textrm{mean} & = E[t] = \int t \exp(-\gamma t) \, dt = \int x \exp(-x)  \, dx/\gamma = 1/\gamma
\end{split}
$$
 
## dimensional analysis

rates and characteristic times/scales

- is $I$ a proportion or a density or a number ... ?
- what are the units of $\beta$, $\gamma$ ?

## nondimensionalization

- standardize any values that can be eliminated **without loss of (mathematical) generality**
- what can we do here?
- $\gamma=1$
- $I$ ? (depends on how we have defined it initially) $\to I/N$

## compare with data???

Original scale:

![Philadelphia P&I](pix/phila_flu.pdf)

Log scale:

```{r,philalog,echo=FALSE,message=FALSE}
ggsave(gg1+scale_y_log10(),file="pix/phila_flu_log.pdf")
```

![Philadelphia P&I, log scale](pix/phila_flu_log.pdf)

---

* Fit a straight line through the straight part of the curve
* slope is $\beta N$
* "intercept" is $\log(I(0))$ (zero is defined in a tricky way)

```{r,philalog_lm,echo=FALSE,message=FALSE,fig.cap="log-scale flu with regression"}
gg_param_est <- gg1+scale_y_log10()+
      geom_smooth(method="lm",
                  colour="red",
                  data=filter(dd,
                              date>=as.Date("1918/09/15"),
                              date<=as.Date("1918/10/05")))
print(gg_param_est)
ggsave("pix/phila_flu_reg.pdf")
```

```{python linreg}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
dd = pd.read_csv("data/pim_us_phila_city_1918_dy.csv")
## plt.plot(dd.pim)
## plt.plot(np.log10(dd.pim))
t = np.arange(20)
lw = np.log10(dd.pim)[20:40]
plt.plot(t,lw,'o')
## https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lstsq.html
## https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html
ta = t.reshape(-1,1)  ## make this into a column vector
reg = LinearRegression().fit(ta,lw)
plt.plot(t,reg.intercept_+reg.coef_[0]*t)
```

## model assessment

* math is super-easy!
* clear, testable predictions
* parameter estimation is easy
* only consistent over a short time window
    * small $t$: arbitrarily close to zero
	* large $t$: ridiculous

# Simple (SI) epidemic

- what are we missing?
- **depletion of susceptibles**
- let's take a step back and ignore death & recovery for now

---

$$
\begin{split}
dS/dt & = -\beta S I \\
dI/dt & = \beta S I
\end{split}
$$

This looks 2D **but** what if we assume $S+I=N$ is constant? Then $S=N-I$

$$
dI/dt = \beta (N-I) I
$$

How do we solve this? **Partial fractions**

$$
\begin{split}
\frac{dI}{\beta (N-I)I} & = dt \\
dI \left(\frac{A}{N-I} + \frac{B}{I}\right) & = dI \cdot \frac{A + B(N-I)}{I(N-I)} \\
A=B; & \quad B=1/N \\
\frac{1}{\beta N} (-\log(N-I) + \log(I)) \Biggr|_{I(0)}^{I} & = t-t_0 \\
(-\log(N-I) + \log(I)) \Biggr|_{I(0)}^{I} & = (\beta N) (t-t_0)  \quad (\textrm{set } t_0=0) \\
\log\left(\frac{I}{N-I}\right) - \log\left(\frac{I(0)}{N-I(0)}\right)
& = \beta N t \\
\log\left(\frac{I}{N-I}\right) 
& = \beta N t + - \log\left(\frac{I(0)}{N-I(0)}\right) \\
\frac{I}{N-I} & = \exp(\beta N t) \frac{I(0)}{N-I(0)} \equiv Q \\
I & = Q(N-I) \\
I(t)(1+Q) & = QN \\
I(t) & = \frac{QN}{1+Q} = \frac{N}{1 + \frac{1}{Q}} \\
& = \frac{N}{1 + \left( \frac{N-I(0)}{I(0)} \right) \exp(-\beta N t) }
\end{split}
$$

?? $\equiv I(0) \exp(\beta N t) / (1 + (I0/N)(\exp(\beta N t) - 1))$ ??

## Qualitative analysis

* $I \ll N$ ? exponential growth
* **per capita growth rate** ($(dI/dt)/I = d(\log(I))/dt$) decreases monotonically with increasing $I$
* asymptotic behaviour? equilibria? periodic orbits?
* periodic orbits impossible in 1D (uniqueness of flows)

## equilibrium analysis

* $I=0$, **disease free equilibrium** (DFE)
* $I=N$, **endemic equilibrium** (EE)

Stability? (Assume $\beta>0$)

- **local asymptotic stability**
- **global asymptotic stability** (Lyapunov functions)

## model criticism/conclusions

---

(Comparison to metapop, logistic growth model)

---

# SIR model

## Basic SIR model

* put the pieces together

$$
\begin{split}
\frac{dS}{dt} & = - \beta S I \\
\frac{dI}{dt} & = \beta S I - \gamma I \\
\frac{dR}{dt} & = \gamma I
\end{split}
$$

* really 2D (because $S+I+R=N$)
* rescale to $N=1$ ($S$, $I$, $R$ as proportions)

Numerical solution (R version):

```{r SIR}
## define gradient function
SIRgrad <- function(t, y, parms) {
    g <- with(as.list(c(y,parms)), {
        c(-beta*S*I, beta*S*I-gamma*I, gamma*I)
    })
    return(list(g))
}
library(deSolve)
## initial conditions and parameters
y0 <- c(S=0.99, I=0.01, R=0)
p0 <- c(beta=4, gamma=1)
tvec <- seq(0,8,length=101)
## solve (LSODA by default)
sir_R <- ode(y=y0, times=tvec, parms=p0, func=SIRgrad)
```

```{r SIRplot,fig.width=6,fig.height=6,out.width="0.5\\textwidth",fig.cap="SIR model (R)"}
## plot
par(las=1,bty="l") ## cosmetic
matplot(tvec, sir_R[,-1],
        type="l", lwd=2, ## solid lines, thicker
        xlab="time",ylab="proportion")
legend("right",names(y0), col=1:3, lty=1:3, lwd=2)
```

## Phase plane plot

```{r phaseplane,fig.width=6,fig.height=6,out.width="0.5\\textwidth",fig.cap="SIR phase plane (R)"}
par(las=1,bty="l") ## cosmetic
plot(I~S,type="l",data=as.data.frame(sir_R))
with(as.data.frame(sir_R), points(S,I, cex=0.75,pch=16))
```

## Solve using Python

```{python SIR2}
import numpy as np
import scipy.integrate
def SIR_grad(x,t,params):
   """basic gradient definitions for SIR model"""
   beta,gamma = params   ## unpack parameters
   S,I,R = x             ## unpack state variables
   return(np.array([-beta*S*I, beta*S*I-gamma*I, gamma*I]))

t_vec = np.linspace(0,8,101)
params = (4,1) ## extra parameters (beta, gamma)
y0 = (0.99, 0.01, 0)
SIR_sol1 = scipy.integrate.odeint(SIR_grad,
                                  y0=y0,
                                  t=t_vec,
                                  args=(params,))
```

```{python SIRplot_python,fig.width=6,fig.height=6,out.width="0.5\\textwidth"}
## https://community.rstudio.com/t/how-to-display-the-plot-in-the-python-chunk/22039/3
import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.plot(SIR_sol1);
plt.show()
```

## dimensional analysis

* initial growth rate ($\textrm{time}^{-1}$) $\beta-\gamma$
* mean infectious period $1/\gamma$ (time)
* basic reproduction number $\mathcal{R}_0 = \beta/\gamma$

## initial growth rate

$$
\begin{split}
\frac{dI}{dt} &  = \beta S - \gamma I \\
       & = (\beta S - \gamma) I \\
	   & \approx (\beta - \gamma) I \quad \textrm{ near } DFE
\end{split}
$$

or calculate **Jacobian** ($\partial X_i/\partial X_j$):

$$
\left(
\begin{array}{ccc}
-\beta I & -\beta S & 0 \\
\beta I & \beta S -\gamma & 0 \\
0 & \gamma & 0 
\end{array}
\right)
$$

Evaluate at DFE ($\{1, 0, 0 \}$):

$$
\left(
\begin{array}{ccc}
0 & -\beta & 0 \\
0 & \beta - \gamma & 0 \\
0 & \gamma & 0 
\end{array}
\right)
$$

Eigenvalues of this are pretty boring! But useful approach.

## Per capita rates

In general we can express *per capita* gradients in $X$
as gradients of $\log(X)$:

$$
\begin{split}
\frac{dX}{dt} & = X f(X,Y,Z, \dots) \\
\frac{\frac{dX}{dt}}{X} & = f(X,Y,Z, \dots) \\
\frac{d\log(X)}{dt} & =  f(X,Y,Z, \dots)
\end{split}
$$

Another way to see that $\beta-\gamma$ is the slope on the log scale.


## Stability of DFE

* $\beta>\gamma$ ($r>0$)
* $\beta/\gamma>1$ ($\mathcal{R}_0>1$)

Local asymptotic stability **or**

* $\frac{dI}{dt}  = \beta SI - \gamma I$
* non-dimensionalize: $\gamma=1$, $\beta=\rzero$
* $\frac{dI}{dt}  = (\rzero S - 1) I$
* $\frac{d\log I}{dt}  = \rzero S - 1$

Since $S \le 1$, $\rzero <1 \to$ deriv of $\log I$ is always negative
(don't really need the last step)

## Automated analysis

```{r phaseR, fig.cap="phase plane analysis in R",fig.width=8,fig.height=8,out.width="\\textwidth"}
library(phaseR)
par(las=1,bty="l",xaxs="i",yaxs="i") ## cosmetic
SIRgrad_2d <- function(t, y, parms) {
    g <- with(as.list(c(y,parms)), {
        c(-beta*S*I, beta*S*I-gamma*I)
    })
    return(list(g))
}
## plot(0:1,0:1,type="n",xlab="S",ylab="I")
f1 <- flowField(SIRgrad_2d,
          xlim=c(0,1),
          ylim=c(0,1),
          parameters=p0,
          state.names=c("S","I"),
          add=FALSE)
n1 <- nullclines(SIRgrad,
                 xlim=c(0,1),
                 ylim=c(0,1),
                 parameters=p0,
                 state.names=c("S","I"))
t1 <- trajectory(SIRgrad_2d,parameters=p0,
           state.names=c("S","I"),
           ## n=10,
           y0=y0[1:2],
           tlim=c(0,5))
```

```{r eval=FALSE}
phasePlaneAnalysis(SIRgrad_2d,xlim=c(0,1),
                   parameters=p0,
                   state.names=c("S","I"),
                   ylim=c(0,1))
```

## Solution

* can't get analytical solution for $S(t)$, $I(t)$
* **but**: we can solve for $I(S)$:

$$
\begin{split}
\frac{dI}{dS} & = \frac{dI/dt}{dS/dt} = -1 + \frac{1}{\rzero S} \\
\int_{I(0)}^I(t) \, dI & = \int_{S(0)}^{S(t)} \left( -1 + \frac{1}{\rzero S} \right) \, dS \\
I-I(0) & = -(S-S(0)) + \frac{1}{\rzero} \log(S/S(0)) \\
I + S - (I(0)+S(0)) & = \frac{1}{\rzero} \log(S/S(0))
\end{split}
$$

## Final size calculations

* $t \to \infty$: 
$$
(I_\infty + S_\infty) - (I(0)+S(0)) = \frac{1}{\rzero} \log S_\infty/S(0)
$$
* newly invading pathogen: $S \approx 1$, $I(0) \ll 1$ ($\approx 0$), $I_\infty \to 0$
* in the limit $I(0) \to 0$:
$$
S_\infty) - 1 = \frac{1}{\rzero} \log S_\infty
$$
* "final size" $Z = 1-S_\infty$
* $-Z = \frac{1}{\rzero} \log (1-Z)$

## Lambert W functions

* How do we solve this?
* Newton's method (or whatever)
* *Lambert $W$* [@corless_lambert_1996]: solves $W \exp(W) = Z$

```{python symW}
import sympy as sym
z, R = sym.symbols('z R')
sym.solve(sym.Eq(z,-1/R*sym.log(1-z)),z)
```

```{r finalsize,fig.width=8,fig.height=8,out.width="\\textwidth"}
finalsize <- function(R0) {
    1+1/R0*lambertW(-R0*exp(-R0))
}
R0 <- 3
curve(-1/R0*log(1-x), from=0,to=1)
curve(1*x, add=TRUE,col="red")
library(emdbook)
abline(v=finalsize(R0),lty=2)
```

## Epidemic threshold

Assuming vaccination (or other perfect *prophylaxis* [protection]) at rate $p$

$$
R_0 = 1 - 1/p
$$

speed-based intervention:

$$
\begin{split}
\beta S I - (\gamma + \phi) I & < 0 \\
I (\beta - \gamma - \phi) & < 0 \\
\phi & > (\beta - \gamma) = r
\end{split}
$$

## Comparing Epidemic threshold vs. final size

```{r cmp_thresh,fig.cap="final size vs herd immunity",fig.width=7,fig.height=5,out.width="\\textwidth"}
library(emdbook)
finalsize <- function(R0) {
    1+1/R0*lambertW(-R0*exp(-R0))
}
par(las=1,bty="l")
curve(finalsize(x),from=1,to=10,xlab=expression(R[0]),
      ylab="proportion")
curve(1-1/x, add=TRUE, col=2)
legend("bottomright",
       c("final size","herd immunity threshold"),
       col=1:2, lty=1)
```

## Estimating R from data

- Euler-Lotka equation

$$
\begin{split}
I(t) & = \int_0^t I(t-\tau) K(\tau) \, d\tau \\
I(0) \exp(rt) & = \int_0^t I(0) \exp(r(t-\tau)) K(\tau) \, d\tau \\
1 & = \int_0^t  \exp(-r \tau) K(\tau) \, d\tau \\
1 & = \int_0^t  \exp(-r \tau) \rzero g(\tau) \, d\tau \\
\frac{1}{\rzero} & = \int_0^t  \exp(-r \tau) g(\tau) \, d\tau
\end{split}
$$

## SIRS/SIR with vital dynamics

* models of **endemic** disease
* e.g. "childhood diseases" (measles, mumps, rubella, pertussis, polio, chickenpox, ...)
   * directly transmitted, acute, immunizing
* SIRS model: influenza (evolution), coronaviruses/SARS-CoV-2 (maybe???), cholera [@king_inapparent_2008]
* SIR model *with vital dynamics*

$$
\begin{split}
\frac{dS}{dt} & = \mu N - \beta/N S I - \mu S \\
\frac{dI}{dt} & = \beta/N S I - \gamma I - \mu I \\
\frac{dR}{dt} & = \gamma I - \mu R
\end{split}
$$


* Balanced population (birth rate = $\mu N$). Can consider more complex demography but often don't need to
    * disease-induced death rates low relative to natural mortality
	* demographic time scales much longer than epidemic time scales  
(exceptions: **chronic** diseases like tuberculosis, HIV/AIDS, diseases of non-human animals an dplants ...)	
* Scaling $\beta/N$ is much easier for dealing with applications/real data, scaling $N=1$ is easier for doing math
* $\rzero$ is $\beta/(\mu+\gamma)$ ($\approx \beta/\gamma$ for most human diseases)

Most of the following is taken from @brauer_endemic_2019
$$
\begin{split}
S^* & = \frac{\mu+\gamma}{\beta} = 1/\rzero  \quad \textrm{(this is \textbf{very general})} \\
I^* & = \frac{\mu}{\mu+\gamma} - \frac{\mu}{\beta} = \frac{\mu}{\beta} (\rzero-1)
\end{split}
$$

* at equilibrium the **force of infection** is $\beta I^*$, so the **average age at infection** is $A=1/(\beta I^*)$
* average lifespan is $L=1/\mu$
* $L/A = \beta I^*/\mu = \rzero-1$
    * another way to estimate $\rzero$! (also, $S^* = 1/\rzero$)
	* tells us something about risk by age, effects of vaccination
	
Jacobian at EE:

$$
\left(
\begin{array}{cc}
-\mu\rzero & -(\mu + \gamma) \\
\mu(\rzero-1) & 0
\end{array}
\right)
$$

Trace = $-\mu \rzero$, Det = $\mu(\mu+\gamma)(\rzero-1)$

$$
\begin{split}
\lambda & = (1/2) \left( -\mu \rzero \pm \sqrt{\mu^2\rzero^2 - 4 \mu(\rzero-1)(\mu+\gamma)} \right) \\
& \approx (1/2) \left( -\mu \rzero \pm \sqrt{-4\mu(\rzero-1)\gamma} \right) \\
& = -\frac{\mu \rzero}{2} \pm i \sqrt{(1/L) (L/A) \gamma} \\
& =  -\frac{\mu \rzero}{2} \pm i \cdot 1/\sqrt{A \tau}
\end{split}
$$
where $\tau=1/\gamma$ is the infectious period. Both parts of the eigenvalue have units of time$^{-1}$.

* the period is $2\pi$ *divided by* the imaginary part = $2 \pi \sqrt{A \tau}$
* e.g. for measles $A \approx 5 \textrm{yr}$, $\tau \approx 1/26$, epidemic interval is `2*pi*sqrt(5/26)` $\approx$ `r round(2*pi*sqrt(5/26),2)` years.
* **Damping factor**: amplitude decreases by a factor $\exp(-\mu \rzero T/2)$ per cycle (factor of 1/2 because we are measuring the size of the excursions, not the size of the envelope)

```{r damping, echo=FALSE, fig.cap="damping",fig.width=7,fig.height=5,out.width="\\textwidth"}
par(las=1,bty="l")
f <- function(x) exp(-x/4)*cos(2*pi*x)
curve(f(x),from=0,to=8,n=501,xlab="time",ylab="")
abline(h=0,lty=2)
arrows(1,0.8,2,0.8, code=3, length=0.1, angle=20)
text(1.5,0.8,"period",pos=3)
segments(3,f(3),4,f(3),lty=2)
segments(3,f(4),4,f(4),lty=2)
arrows(3.5,f(3),3.5,f(4), code=3,length=0.1,angle=20)
text(3.5,(f(3)+f(4))/2, pos=4, "damping factor")
```

## Stochasticity

@allen_primer_2017

## Reed-Frost model

* notes on history: 1927-1928, 1951-1952 [@abbey_examination_1952; @reed_epidemic_1951-1], 1976 [@frost_conceptions_1976]
* household infection model: fixed (small) population, discrete infection generations
* start with **index cases**
* then allow infection: probability of infection = $1 - (1-p_i)^I$
* expected number of infections = $S \left(1-(1-p_i)^I\right)$
* $\rzero=p_i N$
* **hazard** interpretation
   * probability of infection per $I$ per small $\Delta t$ = $\beta$
   * prob of **non-infection** by 1 inf at time $\tau$ = $\exp(-\beta \tau) = 1-p_i$
   * prob of non-inf by $I$ inf = $\exp(-\beta \tau)^I = \exp( -(\beta I) \tau)$
   * hazard $\equiv$ FOI
* can do standard analysis of equilibria, stability, etc. (${\bf X}_{t+1} = {\bf X}_t$; stability based on $|\lambda| \lessgtr 1$)
* what is $\rzero$ ?
* $r$ vs $R$ relationship: $\rzero = \left(1+\kappa r \bar G \right)^{1/\kappa}$
    * $\kappa$ is the the reciprocal of the *shape parameter* ($\kappa=\textrm{CV}^2$)
	* SIR: $\kappa=1$, $\rzero=1+r \bar G$. R-F: $\kappa \to 0$ so $\rzero = \exp(r\bar G)$

## discrete-time stochastic R-F

* stochastic version: $I_{t+1} \sim \textrm{Binom}\left(S_t, 1-(1-p_i)^{I_t}\right)$

```{r reedfrost1,fig.cap="Reed-Frost ensemble",fig.width=7,fig.height=5,out.width="\\textwidth"}
set.seed(101)
rf <- function(nt,y0,p_i) {
    res <- numeric(nt)
    S <- y0[["S"]]
    I <- res[1] <- y0[["I"]]
    for (t in 2:nt) {
        I <- rbinom(1, prob=1-(1-p_i)^I, size=S)
        S <- S-I
        if (I==0) break
        res[t] <- I
    }
    return(res)
}
r0 <- rf(20, y0=c(S=99,I=1), p_i=0.02)
r1 <- replicate(300, rf(20, y0=c(S=99,I=1), p_i=0.02))
par(las=1,bty="l")
matplot(r1,type="l",col=adjustcolor("black",alpha.f=0.2),lty=1)
lines(rowMeans(r1),col=2,lwd=3)
```

```{r ggplot,echo=FALSE,message=FALSE,warning=FALSE,fig.cap="Reed-Frost ensemble 2",fig.width=7,fig.height=5,out.width="\\textwidth"}
library(tidyverse); theme_set(theme_bw())
colnames(r1) <- 1:ncol(r1)
r1w <- (r1
    %>% as_tibble()
    %>% mutate(time=seq(n()))
    %>% pivot_longer(names_to="rep",values_to="inf",-time)
)
ggplot(r1w,aes(time,inf)) + stat_sum(alpha=0.2) +
    scale_size(range=c(1,12)) + theme(legend.position="none") +
    stat_summary(fun=mean,geom="line",colour="red")
```

## Gillespie algorithm

* define all processes in terms of *rates* (SIR: $\beta S I$, $\gamma I$), rather than gradients
* *Poisson process*: exponentially distributed 

```{r gillespie1}
library(GillespieSSA2)
parms <- c(beta = 5 , gamma = 1, N=100)
final_time <- 10
initial_state <- c(S = 99, I=1, R=0)
reactions <- list(
  reaction("beta*S*I/N",  c(S = -1, I=+1), name="transmission"),
  reaction("gamma*I",   c(I = -1, R = +1), name="recovery")
)
set.seed(1)
g1 <- ssa(initial_state,reactions,final_time,parms,
          method=ssa_exact(),
          sim_name="SIR")
```

```{r fig.cap="Gillespie realization",fig.width=7,fig.height=5,out.width="\\textwidth"}
plot_ssa(g1) + geom_step()
```

```{r cache=TRUE, gillespie2,eval=FALSE,echo=FALSE}
gfun <- function() {
    res <- ssa(initial_state,reactions,final_time,parms,
               method=ssa_exact(),
               census_interval=0.1,
               sim_name="SIR")
    return(res$state[,"I"])
}
g2 <-replicate(300,gfun())
```

```{r echo=FALSE}
load("gbatch.RData")
plot(g2[[1]],xlim=c(0,70),ylim=c(0,65),type="n")
invisible(lapply(g2,lines,type="s",col=adjustcolor("black",alpha.f=0.3)))
```

## stochastic ODEs

* take limits of very large population size, short time, so that stochastic changes become a *Wiener process* (continuous, non-differentiable, changes are Gaussian)

$$
dX(t) = \underbrace{f(X(t))\, dt}_{\textrm{deterministic}} +
\underbrace{G(X(t)) \, dW(t)}_{\textrm{stochastic}}
$$

* $f(X(t))$ is the original gradient vector
* $G(X(t))$:
    * need $(G \, dW)(G \, dW)^T$ to equal the **covariance** of $\Delta X$.

$$
C = E\left(
\begin{array}{cc}
(\Delta S)^2 & \Delta S \Delta I \\
\Delta S \Delta I & (\Delta I)^2
\end{array}
\right)
= \left( \begin{array}{cc}
\beta S I/N & - \beta S I/N \\
- \beta S I/N & \beta SI/N + \gamma I
\end{array}
\right) \Delta t
$$

Need the **matrix square root** of $C$, i.e. $G$ such that $G G^T=C$. (**Cholesky decomposition** or other)

* **Euler-Maruyama** method: Euler integration  + noise scaled by $\sqrt{\Delta t}$

---

## References

